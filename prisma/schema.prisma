
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  password       String
  firstName      String
  lastName       String
  accountType    String        @default("tourist") // "tourist", "provider", "admin"
  isAdmin        Boolean       @default(false)
  profilePicture String?
  bio            String?
  phone          String?
  status         String        @default("active") // "active", "suspended", "pending"
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  experiences    Experience[]
  bookings       Booking[]
  registrations  Registration[]
  enrollments    Enrollment[]
}

model Experience {
  id              String    @id @default(uuid())
  title           String
  description     String
  location        String
  price           Float
  duration        Int // in hours
  maxParticipants Int
  category        String
  featured        Boolean   @default(false)
  images          String[]
  host            User      @relation(fields: [hostId], references: [id])
  hostId          String
  bookings        Booking[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Booking {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId String
  date         DateTime
  participants Int
  totalAmount  Float
  status       String     @default("pending") // "pending", "confirmed", "completed", "cancelled"
  paymentId    String?  // Optional payment ID field
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  status    String   @default("new") // "new", "read", "responded"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Registration {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  programType String   // "guide-training", "ecotourism", "entrepreneurship", "language"
  status      String   @default("pending") // "pending", "approved", "rejected"
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Stat {
  id        String   @id @default(uuid())
  title     String
  value     String
  icon      String?
  change    String?
  timeframe String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String
  category    String
  image       String?
  duration    String?
  topics      String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
}

model Enrollment {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String
  status      String    @default("enrolled")  // "enrolled", "completed", "dropped"
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
